@startuml
skinparam packageStyle frame

package database {
  class UserDAO {
    + getUserRoleByID(userId: String): String		
    + getUserByID(userId: String): User
    + isUserPresentByID(userId: String): boolean
    + isUserPresentByEmail(email: String): boolean
    + getUserIdByEmail(email: String): int
    + getAllAuthors(): List<User>
    + saveUser(user: User): void
  }
  
  class ConferenceDAO {
    + getAllConferences(): List<Conference>
    + saveConference(conf: Conference): void
    + getArticlesByConference(confId: String): List<Article>
  }
  
  class ArticleDAO {
    + saveArticle(art: Article): void
    + getArticlesByAuthor(authorId: String): List<Article>
    + getArticleByID(id: String): Article
    + updateArticleStatus(id: String, status: String): void
  }
  
  class ReviewDAO {
    + assignReviewer(articleID: String, reviewerId: String): void
    + getReviewersForArticle(articleId: STring): List<Integer>
    + hasConflictOfInterest(articleId, reviewerId): boolean
  }

  class DBManager {
    + getConnectio(): ODBConnection
  }

  UserDAO --> DBManager
  ConferenceDAO --> DBManager
  ArticleDAO --> DBManager
  ReviewDAO --> DBManager
}

package Entity {

  abstract class User {
    - id: int
    - name: String
    - lastName: String
    - email: String
    - Affiliazione: String
    + getName(): String
    + getLastName(): String
    + getEmail(): String
    + getId(): int
    + getAffiliazione(): String
    + setAffiliazione(aff: String): void
    + setEmail(email: String): void
  }

  class Author {
    - final role: String
    + getRole(): String
  }

  class Organizer {
    - final role: String
    + getRole(): String
  }

  class Article {
    - titolo: String
    - abstract: String
    - coautori: List<Author>
  }
  
  class Conference {
    - titolo: String
    - descrizione: String
    - scadenza: Date
    - articoli: List<Article>
    + getTitolo(): String
    + getDescrizione(): String
    + getScadenza(): Date
    + getArticoli(): List<Article>
  }

  User <|-- Author
  User <|-- Organizer
  Conference o-- Article
}

package Controller {
  class UserController {
    + registerUser(user: User): boolean
    + login(email: String, password: String): User
  }
  class ConferenceController {
    + createConference(title: String, desc: String, scadenza: Date, organizer: Organizer): void
    + getActiveConferences(): List<Conference>
    + getArticlesByConference(id: String): List<Article>
  }
  
  class ArticleController {
    + submitArticle(art: Article, conf: Conference): void
    + getArticlesByAuthor(id: String) List<Article>
    + unpdateArticleStatus(id: String, status: String): void
  }

  class ReviewController {
    + assignReviewer(articleID: String, reviewerId: String): boolean
  }
}

package Boundary {
  class LoginView {
    + showLoginForm()
    + showRegistretionForm()
    + handleLogin()
    + handleRegistration()
  }
  class LoginForm{
    +displayForm()
    +submitLogin()
  }
  class RegisterForm{
    +displayForm()
    submitRegistration()
  }
  
  class AuthorDashboard {
    + showActiveConferences()
    + showSubmittedArticles()
  }
  
  class SubmitArticleForm {
    + displayForm()
    + submitArticle()
  }
  
  class OrganizerDashboard {
    + showConferenceList()
    + viewStats()
  }
  
  class CreateConferenceForm {
    + displayForm()
    + createConference()
  }
  
  class AssignReviewrsView {
    + showPendingArticles()
    + assignReviewers()
  }
  
}

UserDAO --> User
ArticleDAO --> Article
ConferenceDAO --> Conference
LoginView --> UserController
AuthorDashboard --> ArticleController
SubmitArticleForm --> ArticleController
OrganizerDashboard --> ConferenceController
AssignReviewrsView --> ReviewController
UserController --> UserDAO
ArticleController --> ArticleDAO
ConferenceController --> ConferenceDAO
ReviewController --> ReviewDAO
@enduml
