@startuml
skinparam packageStyle frame

package database {
  class UserDAO {
    + getUserRoleByID(userId: int): String		
    + getUserByID(userId: int): User
    + isUserPresentByID(userId: int): boolean
    + isUserPresentByEmail(email: String): boolean
    + getUserIdByEmail(email: String): int
    + getAllAuthors(): List<User>
    + saveUser(user: User): void
  }
  
  class ConferenceDAO {
    + getAllConferences(): List<Conference>
    + saveConference(conf: Conference): void
    + getArticlesByConference(confId: int): List<Article>
  }
  
  class ArticleDAO {
    + saveArticle(art: Article): void
    + getArticlesByAuthor(authorId: int): List<Article>
    + getArticleByID(id: int): Article
    + updateArticleStatus(id: int, status: String): void
  }
  
  class ReviewDAO {
    + assignReviewer(articleID: int, reviewerId: int): void
    + getReviewersForArticle(articleId: int): List<Integer>
    + hasConflictOfInterest(articleId, reviewerId): boolean
  }
}

package Entity {

  abstract class User {
    - id: int
    - name: String
    - lastName: String
    - email: String
    - Affiliazione: String
    + getName(): String
    + getLastName(): String
    + getEmail(): String
    + getId(): int
    + getAffiliazione(): String
    + setAffiliazione(aff: String): void
    + setEmail(email: String): void
  }

  class Author {
    - final role: String
    + getRole(): String
  }

  class Organizer {
    - final role: String
    + getRole(): String
  }

  class Article {
    - titolo: String
    - abstract: String
    - coautori: List<Author>
  }
  
  class Conference {
    - titolo: String
    - descrizione: String
    - scadenza: Date
    - articoli: List<Article>
    + getTitolo(): String
    + getDescrizione(): String
    + getScadenza(): Date
    + getArticoli(): List<Article>
  }

  User <|-- Author
  User <|-- Organizer
  Conference o-- Article
}
@enduml
