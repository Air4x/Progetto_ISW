@startuml
skinparam packageStyle frame

package database {
  class UserDAO {
    + getUserRoleByID(userId: String): String		
    + getUserByID(userId: String): User
    + isUserPresentByID(userId: String): boolean
    + isUserPresentByEmail(email: String): boolean
    + getUserIdByEmail(email: String): int
    + getAllAuthors(): List<User>
    + saveUser(user: User): void
  }
  
  class ConferenceDAO {
    + getAllConferences(): List<Conference>
    + saveConference(conf: Conference): void
    + getArticlesByConference(confId: String): List<Article>
  }
  
  class ArticleDAO {
    + saveArticle(art: Article): void
    + getArticlesByAuthor(authorId: String): List<Article>
    + getArticleByID(id: String): Article
    + updateArticleStatus(id: String, status: String): void
  }
  
  class ReviewDAO {
    + assignReviewer(articleID: String, reviewerId: String): void
    + getReviewersForArticle(articleId: STring): List<Integer>
    + hasConflictOfInterest(articleId, reviewerId): boolean
  }

  class DBManager {
    + getConnectio(): ODBConnection
  }

  UserDAO --> DBManager
  ConferenceDAO --> DBManager
  ArticleDAO --> DBManager
  ReviewDAO --> DBManager
}

package Entity {

  abstract class User {
    - id: int
    - name: String
    - lastName: String
    - email: String
    - Affiliazione: String
    # User(aff: String, email: String, lastName: String, name: String, password: String, id: String);
    # User(u: User)
    + getName(): String
    + getLastName(): String
    + getEmail(): String
    + getId(): int
    + getAffiliazione(): String
    + setAffiliazione(aff: String): void
    + setEmail(email: String): void
  }

  class Author {
    - final role: String
    + Author(aff: String, email: String, lastName: String, name: String, password: String, id: String)
    + Author(a: Author)		
    + getRole(): String
  }

  class Organizer {
    - final role: String
    + Organizer(aff: String, email: String, lastName: String, name: String, password: String, id: String)
    + Organizer(o: Organizer)
    + getRole(): String
  }

  class Articolo {
    - titolo: String
    - abstract: String
    - coautori: List<Author>
    + Articolo(id: String, abstr: String, autori: List<Author>, titolo: String)
    + Articolo(a: Articolo)
  }
  
  class Conference {
    - titolo: String
    - descrizione: String
    - scadenza: Date
    - articoli: List<Article>
    + Conference(scadenza: Date, titolo: String, descrizione: String, id: String)
    + Conference(conf: Conference)
    + getTitolo(): String
    + getDescrizione(): String
    + getScadenza(): Date
    + getArticoli(): List<Article>
  }

  User <|-- Author
  User <|-- Organizer
  Conference o-- Article
}

package Controller {

  class UserController {
    + registerUser(String aff, String email, String lastname, String name, String password, String ruole): RUserDTO
    + login(email: String, password: String): RUserDTO
    + getRAuthorBYEmail (String Email): RUserDTO
  }

  class ConferenceController {
    + createConference(Date scadenza, String title, String descr, ID id, RUserDTO org): void
    + getActiveConferences(): ArrayList<ShowActiveConferenceDTO>
    + getArticlesByConference(id: int): ArrayList<ShowArticleDTO>
  }
  
  class ArticleController {
    + submitArticle(String a_titolo, String a_abstrct,  ArrayList<RUserDTO> a_autori, ID id_conf): boolean
    + getArticleByAuthor(ID authorID): ArrayList<ShowArticleDTO>
  }

  class ReviewController {
    + assignReviewer(ID articleID, ArrayList<PossibleReviewDTO> list_r): boolean
    + getListReviewer(ID articleID): ArrayList<PossibleReviewDTO>
    + updateArticleStatus (ID id_article, String status): boolean
  }

  class NotificationController {
    + invioNotifiche(): void
    + creatMessage(String aut_name, String aut_lastname, String conf_title, String msg): void
    + sendEmail (String email_d, String conf_title, String msg): void
  }

}

package Boundary {
  class LoginView {
    + showLoginForm()
    + showRegistretionForm()
    + handleLogin()
    + handleRegistration()
  }
  class LoginForm{
    +displayForm()
    +submitLogin()
  }
  class RegisterForm{
    +displayForm()
    submitRegistration()
  }
  
  class AuthorDashboard {
    + showActiveConferences()
    + showSubmittedArticles()
  }
  
  class SubmitArticleForm {
    + displayForm()
    + submitArticle()
  }
  
  class OrganizerDashboard {
    + showConferenceList()
    + viewStats()
  }
  
  class CreateConferenceForm {
    + displayForm()
    + createConference()
  }
  
  class AssignReviewrsView {
    + showPendingArticles()
    + assignReviewers()
  }
  
}

package DTO{

    class PossibleReviewDTO {
        - id: ID 
        - name: String
        - lastname: String
        - affiliazione: String
        - selezione: boolean
        + getId(): ID
        + getName(): String
        + getLastname(): String
        + getAffiliation(): String
        + getSelection(): bolean
    }

    class RUserDTO {
        - name: String
        - lastname: String
        - email: String
        - affiliazione: String
        - ruolo: String
        - id: ID
        - esito: boolean
        + getName(): String
        + getLastname(): String
        + getEmail(): String
        + getAffiliation(): String
        + getRole(): String
        + getId(): ID
        + getResult(): boolean
    }

    class ShowActiveConferenceDTO {
        - id: ID 
        - titolo: String
        - scadenza: Date
        - descrizione: String
        + getId(): ID
        + getTitle(): String
        + getDeadline(): Date
        + getDescription(): String
    }

    class ShowArticleDTO {
        - id: ID 
        - titolo: String
        - abstr: String
        - autori: ArrayList<RUserDTO>
        + getId(): ID
        + getTitle(): String
        + getAbstr(): String
        +getAuthors(): ArrayList<RUserDTO>
    }

}

UserDAO --> User
ArticleDAO --> Article
ConferenceDAO --> Conference
LoginView --> UserController
AuthorDashboard --> ArticleController
SubmitArticleForm --> ArticleController
OrganizerDashboard --> ConferenceController
AssignReviewrsView --> ReviewController
UserController --> UserDAO
ArticleController --> ArticleDAO
ConferenceController --> ConferenceDAO
ReviewController --> ReviewDAO
UserController --> RUserDTO
ConferenceController --> RUserDTO
ConferenceController --> ShowActiveConferenceDTO
ConferenceController --> ShowArticleDTO
ArticleController --> RUserDTO
ArticleController --> ShowArticleDTO
ReviewController --> PossibleReviewDTO
@enduml
